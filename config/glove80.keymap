/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

#define HYPER LC(LS(LG(LALT)))

// layers

#define DEFAULT 0
#define LOWER 1
#define MAGIC 2
#define FACTORY_TEST 3

/ {
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to

        layer_td: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo LOWER>, <&to LOWER>;
        };

        magic: magic_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };

        hm_right_index: hm_right_index {
            compatible = "zmk,behavior-hold-tap";
            label = "HM_RIGHT_INDEX";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick-tap-ms = <300>;
            require-prior-idle-ms = <100>;
            flavor = "tap-preferred";
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 15 22 23 24 25 26 27 34 35 36 37 38 39 46 47 48 49 50 51 52 53 54 64 65 66 67 68 69 70 71 55 56 57 72 73 74>;
            hold-trigger-on-release;
        };

        hm_left_index: hm_left_index {
            compatible = "zmk,behavior-hold-tap";
            label = "HM_LEFT_INDEX";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick-tap-ms = <300>;
            require-prior-idle-ms = <100>;
            flavor = "tap-preferred";
            hold-trigger-key-positions = <5 6 7 8 9 16 17 18 19 20 21 28 29 30 31 32 33 40 41 42 43 44 45 55 56 57 58 59 60 61 62 63 72 73 74 75 76 77 78 79 52 53 54 69 70 71>;
            hold-trigger-on-release;
        };

        hm_right_middle: hm_right_middle {
            compatible = "zmk,behavior-hold-tap";
            label = "HM_RIGHT_MIDDLE";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <210>;
            quick-tap-ms = <300>;
            require-prior-idle-ms = <150>;
            flavor = "tap-preferred";
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 15 22 23 24 25 26 27 34 35 36 37 38 39 46 47 48 49 50 51 52 53 54 64 65 66 67 68 69 70 71 55 56 57 72 73 55 56 57 72 73 74>;
            hold-trigger-on-release;
        };

        hm_left_middle: hm_left_middle {
            compatible = "zmk,behavior-hold-tap";
            label = "HM_LEFT_MIDDLE";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <210>;
            quick-tap-ms = <300>;
            require-prior-idle-ms = <150>;
            flavor = "tap-preferred";
            hold-trigger-key-positions = <5 6 7 8 9 16 17 18 19 20 21 28 29 30 31 32 33 40 41 42 43 44 45 55 56 57 58 59 60 61 62 63 72 73 74 75 76 77 78 79 52 53 54 69 70 71>;
            hold-trigger-on-release;
        };

        hm_right_ring: hm_right_ring {
            compatible = "zmk,behavior-hold-tap";
            label = "HM_RIGHT_RING";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <400>;
            quick-tap-ms = <300>;
            require-prior-idle-ms = <150>;
            flavor = "tap-preferred";
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 15 22 23 24 25 26 27 34 35 36 37 38 39 46 47 48 49 50 51 52 53 54 64 65 66 67 68 69 70 71 55 56 57 72 73 74>;
            hold-trigger-on-release;
        };

        hm_left_ring: hm_left_ring {
            compatible = "zmk,behavior-hold-tap";
            label = "HM_LEFT_RING";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <400>;
            quick-tap-ms = <300>;
            require-prior-idle-ms = <150>;
            flavor = "tap-preferred";
            hold-trigger-key-positions = <5 6 7 8 9 16 17 18 19 20 21 28 29 30 31 32 33 40 41 42 43 44 45 55 56 57 58 59 60 61 62 63 72 73 74 75 76 77 78 79 52 53 54 69 70 71>;
            hold-trigger-on-release;
        };

        hm_right_pinky: hm_right_pinky {
            compatible = "zmk,behavior-hold-tap";
            label = "HM_RIGHT_PINKY";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <260>;
            quick-tap-ms = <300>;
            require-prior-idle-ms = <150>;
            flavor = "tap-preferred";
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 15 22 23 24 25 26 27 34 35 36 37 38 39 46 47 48 49 50 51 52 53 54 64 65 66 67 68 69 70 71 55 56 57 72 73 74>;
            hold-trigger-on-release;
        };

        hm_left_pinky: hm_left_pinky {
            compatible = "zmk,behavior-hold-tap";
            label = "HM_LEFT_PINKY";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <260>;
            quick-tap-ms = <300>;
            require-prior-idle-ms = <150>;
            flavor = "tap-preferred";
            hold-trigger-key-positions = <5 6 7 8 9 16 17 18 19 20 21 28 29 30 31 32 33 40 41 42 43 44 45 55 56 57 58 59 60 61 62 63 72 73 74 75 76 77 78 79 52 53 54 69 70 71>;
            hold-trigger-on-release;
        };

        hyper_right: hyper_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HYPER_RIGHT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <300>;
            require-prior-idle-ms = <100>;
            flavor = "tap-preferred";
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 15 22 23 24 25 26 27 34 35 36 37 38 39 46 47 48 49 50 51 52 53 54 55 56 64 65 66 67 68 69 70 71 72 55 56 57 72 73 74>;
            hold-trigger-on-release;
        };

        hyper_left: hyper_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HYPER_LEFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <300>;
            require-prior-idle-ms = <100>;
            flavor = "tap-preferred";
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 15 22 23 24 25 26 27 34 35 36 37 38 39 46 47 48 49 50 51 52 53 54 55 56 64 65 66 67 68 69 70 71 72 55 56 57 72 73 74>;
        };

        layer_on_hold: layer_on_hold {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_ON_HOLD";
            bindings = <&sl>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <300>;
            require-prior-idle-ms = <150>;
            flavor = "tap-preferred";
            hold-trigger-on-release;
            hold-trigger-key-positions = <5 6 7 8 9 16 17 18 19 20 21 28 29 30 31 32 33 40 41 42 43 44 45 55 56 57 58 59 60 61 62 63 72 73 74 75 76 77 78 79 52 53 54 69 70 71>;
        };

        enter_or_capsword: enter_or_capsword {
            compatible = "zmk,behavior-mod-morph";
            label = "ENTER_OR_CAPSWORD";
            bindings = <&kp ENTER>, <&caps_word>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        backspace_or_delete: backspace_or_delete {
            compatible = "zmk,behavior-mod-morph";
            label = "BACKSPACE_OR_DELETE";
            bindings = <&kp BACKSPACE>, <&kp DELETE>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT)>;
        };

        sticky_key_quick_release: sticky_key_quick_release {
            compatible = "zmk,behavior-sticky-key";
            label = "STICKY_KEY_QUICK_RELEASE";
            bindings = <&sk>;
            #binding-cells = <1>;
            quick-release;
            release-after-ms = <1000>;
        };
    };

    macros {
        rgb_ug_status_macro: rgb_ug_status_macro_0 {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&rgb_ug RGB_STATUS>;
        };

        bt_0: bt_profile_macro_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 0>;
        };

        bt_1: bt_profile_macro_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 1>;
        };

        bt_2: bt_profile_macro_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 2>;
        };

        bt_3: bt_profile_macro_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 3>;
        };
    };

    combos {
        compatible = "zmk,combos";

        combo_copy {
            bindings = <&kp LG(C)>;
            key-positions = <49 50>;
            layers = <0>;
        };

        combo_paste {
            bindings = <&kp LG(V)>;
            key-positions = <51 50>;
            layers = <0>;
        };

        combo_equal {
            bindings = <&kp EQUAL>;
            key-positions = <30 31>;
            layers = <0>;
        };

        combo_backtick {
            bindings = <&kp NON_US_BACKSLASH>;
            key-positions = <25 24>;
            layers = <0>;
        };

        combo_undo {
            bindings = <&kp LG(Z)>;
            key-positions = <47 48>;
            layers = <0>;
        };

        combo_cut {
            bindings = <&kp LG(X)>;
            key-positions = <48 49>;
            layers = <0>;
        };

        combo_left_curly {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <37 38>;
            layers = <0>;
        };

        combo_right_curly {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <41 42>;
            layers = <0>;
        };

        combo_left_shift {
            bindings = <&sticky_key_quick_release LEFT_SHIFT>;
            key-positions = <36 37>;
            layers = <0 4>;
        };

        combo_right_shift {
            bindings = <&sticky_key_quick_release RIGHT_SHIFT>;
            key-positions = <42 43>;
            layers = <0 4>;
        };

        combo_hyphen {
            bindings = <&kp MINUS>;
            key-positions = <60 61>;
            layers = <0>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |  F1   |  F2 |  F3 |  F4  |  F5  |                                                               |  F6   |  F7   |  F8  |   F9  |  F10 |
            // |  =    |  1  |  2  |  3   |  4   |  5   |                                                 |  6   |   7   |   8   |  9   |   0   |   -  |
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                                                 |  Y   |   U   |   I   |  O   |   P   |   \  |
            // |  ESC  |  A  |  S  |  D   |  F   |  G   |                                                 |  H   |   J   |   K   |  L   |   ;   |   '  |
            // |   `   |  Z  |  X  |  C   |  V   |  B   | LSHFT | LCTRL | LOWER | | LGUI  | RCTRL | RSHFT |  N   |   M   |   ,   |  .   |   /   | PGUP |
            // | MAGIC | HOME| END | LEFT | RIGHT|      | BSPC  | DEL   | LALT  | | RALT  | RET   | SPACE |      |  UP   | DOWN  |  [   |   ]   | PGDN |

            bindings = <
&none                 &none                          &none                     &none     &none                                                                                                                                                                         &none                        &none      &none                       &none                               &none
&none                 &none                          &none                     &none     &none                  &none                                                                                                            &none                                 &none                        &none      &none                       &none                               &none
&kp TAB               &kp Q                          &kp W                     &kp E     &kp R                  &kp T                                                                                                            &kp Y                                 &kp U                        &kp I      &kp O                       &kp P                               &none
&backspace_or_delete  &layer_on_hold 1 A             &hm_left_ring LEFT_ALT S  &kp D     &hm_left_index LGUI F  &hyper_left LC(LA(LS(LEFT_GUI))) G                                                                               &hyper_right RC(RA(RS(RIGHT_GUI))) H  &hm_right_index RIGHT_GUI J  &kp K      &hm_right_ring RIGHT_ALT L  &kp SEMI                            &none
&kp LEFT_SHIFT        &hm_left_pinky LEFT_CONTROL Z  &kp X                     &kp C     &kp V                  &kp B                               &none               &none  &none  &none  &none  &none                        &kp N                                 &kp M                        &kp COMMA  &kp DOT                     &hm_right_pinky RIGHT_CONTROL FSLH  &none
&magic MAGIC 0        &none                          &none                     &kp LEFT  &kp RIGHT                                                  &enter_or_capsword  &none  &none  &none  &none  &mt RC(RA(RS(SPACE))) SPACE                                        &kp UP                       &kp DOWN   &none                       &none                               &none
            >;
        };

        lower_layer {
            bindings = <
&kp C_BRI_DN  &kp C_BRI_UP  &kp C_PREV  &kp C_NEXT  &kp C_PP                                                                              &kp C_MUTE  &kp C_VOL_DN  &kp C_VOL_UP   &none            &kp PAUSE_BREAK
&trans        &none         &none       &none       &none      &kp HOME                                                        &kp LPAR   &kp KP_NUM  &kp KP_EQUAL  &kp KP_DIVIDE  &kp KP_MULTIPLY  &kp PSCRN
&trans        &none         &none       &kp UP      &none      &kp END                                                         &kp RPAR   &kp KP_N7   &kp KP_N8     &kp KP_N9      &kp KP_MINUS     &kp SLCK
&trans        &none         &kp LEFT    &kp DOWN    &kp RIGHT  &kp PG_UP                                                       &kp PRCNT  &kp KP_N4   &kp KP_N5     &kp KP_N6      &kp KP_PLUS      &none
&trans        &kp K_CMENU   &none       &kp F11     &kp F12    &kp PG_DN  &trans  &trans  &to DEFAULT  &trans  &trans  &trans  &kp COMMA  &kp KP_N1   &kp KP_N2     &kp KP_N3      &kp KP_ENTER     &trans
&trans        &kp CAPS      &kp INS     &kp F11     &kp F12               &trans  &trans  &trans       &trans  &trans  &trans             &kp KP_N0   &kp KP_N0     &kp KP_DOT     &kp KP_ENTER     &trans
            >;
        };

        magic_layer {
            bindings = <
&bt BT_CLR   &none            &none            &none            &none                                                                                     &none  &none  &none  &none  &bt BT_CLR_ALL
&none        &none            &none            &none            &none            &none                                                             &none  &none  &none  &none  &none  &none
&none        &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                   &none  &none  &none  &none  &none  &none
&bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                   &none  &none  &none  &none  &none  &bootloader
&sys_reset   &none            &none            &none            &none            &none            &bt_2  &bt_3  &none         &none  &none  &none  &none  &none  &none  &none  &none  &sys_reset
&none        &none            &none            &none            &none                             &bt_0  &bt_1  &out OUT_USB  &none  &none  &none         &none  &none  &none  &none  &to FACTORY_TEST
            >;
        };

        factory_test_layer {
            bindings = <
&kp N0  &kp N6  &kp N2  &kp N8  &kp N4                                                                  &kp N4  &kp N8  &kp N2  &kp N6  &kp N0
&kp N1  &kp N7  &kp N3  &kp N9  &kp N5  &kp N0                                                  &kp N0  &kp N5  &kp N9  &kp N3  &kp N7  &kp N1
&kp N2  &kp N8  &kp N4  &kp N0  &kp N6  &kp N1                                                  &kp N1  &kp N6  &kp N0  &kp N4  &kp N8  &kp N2
&kp N3  &kp N9  &kp N5  &kp N1  &kp N7  &kp N2                                                  &kp N2  &kp N7  &kp N1  &kp N5  &kp N9  &kp N3
&kp N4  &kp N0  &kp N6  &kp N2  &kp N8  &kp N3  &kp N4  &kp N5  &kp N6  &kp N6  &kp N5  &kp N4  &kp N3  &kp N8  &kp N2  &kp N6  &kp N0  &kp N4
&kp N5  &kp N1  &kp N7  &kp N3  &kp N9          &kp N7  &kp N8  &kp N9  &kp N9  &kp N8  &kp N7          &kp N9  &kp N3  &kp N7  &kp N1  &kp N5
            >;
        };

        numbers {
            bindings = <
&trans  &trans  &trans                     &trans  &trans                                                                                                                                                  &trans                        &trans  &trans                       &trans  &trans
&trans  &trans  &trans                     &trans  &trans                      &trans                                                                               &trans                                 &trans                        &trans  &trans                       &trans  &trans
&trans  &trans  &trans                     &trans  &trans                      &trans                                                                               &trans                                 &trans                        &trans  &trans                       &trans  &trans
&trans  &kp N1  &hm_left_ring LEFT_ALT N2  &kp N3  &hm_left_index LEFT_GUI N4  &hyper_left LS(LC(LG(LEFT_ALT))) N5                                                  &hyper_right RS(RC(RG(RIGHT_ALT))) N6  &hm_right_index RIGHT_GUI N7  &kp N8  &hm_right_ring RIGHT_ALT N9  &kp N0  &trans
&trans  &trans  &trans                     &trans  &trans                      &trans                               &trans  &trans  &trans  &trans  &trans  &trans  &trans                                 &trans                        &trans  &trans                       &trans  &trans
&trans  &trans  &trans                     &trans  &trans                                                           &trans  &trans  &trans  &trans  &trans  &trans                                         &trans                        &trans  &trans                       &trans  &trans
            >;
        };
    };
};
