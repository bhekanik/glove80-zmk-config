/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

#define HYPER LC(LS(LG(LALT)))

// layers

#define DEFAULT 0
#define LOWER 1
#define MAGIC 2
#define FACTORY_TEST 3

/ {
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to

        layer_td: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo 1>, <&to 1>;
        };

        magic: magic_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };

        hm_right_index: hm_right_index {
            compatible = "zmk,behavior-hold-tap";
            label = "HM_RIGHT_INDEX";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick-tap-ms = <300>;
            require-prior-idle-ms = <100>;
            flavor = "tap-preferred";
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 15 22 23 24 25 26 27 34 35 36 37 38 39 46 47 48 49 50 51 52 53 54 64 65 66 67 68 69 70 71 55 56 57 72 73 74>;
            hold-trigger-on-release;
        };

        hm_left_index: hm_left_index {
            compatible = "zmk,behavior-hold-tap";
            label = "HM_LEFT_INDEX";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick-tap-ms = <300>;
            require-prior-idle-ms = <100>;
            flavor = "tap-preferred";
            hold-trigger-key-positions = <5 6 7 8 9 16 17 18 19 20 21 28 29 30 31 32 33 40 41 42 43 44 45 55 56 57 58 59 60 61 62 63 72 73 74 75 76 77 78 79 52 53 54 69 70 71>;
            hold-trigger-on-release;
        };

        hm_right_middle: hm_right_middle {
            compatible = "zmk,behavior-hold-tap";
            label = "HM_RIGHT_MIDDLE";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <210>;
            quick-tap-ms = <300>;
            require-prior-idle-ms = <150>;
            flavor = "tap-preferred";
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 15 22 23 24 25 26 27 34 35 36 37 38 39 46 47 48 49 50 51 52 53 54 64 65 66 67 68 69 70 71 55 56 57 72 73 55 56 57 72 73 74>;
            hold-trigger-on-release;
        };

        hm_left_middle: hm_left_middle {
            compatible = "zmk,behavior-hold-tap";
            label = "HM_LEFT_MIDDLE";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <210>;
            quick-tap-ms = <300>;
            require-prior-idle-ms = <150>;
            flavor = "tap-preferred";
            hold-trigger-key-positions = <5 6 7 8 9 16 17 18 19 20 21 28 29 30 31 32 33 40 41 42 43 44 45 55 56 57 58 59 60 61 62 63 72 73 74 75 76 77 78 79 52 53 54 69 70 71>;
            hold-trigger-on-release;
        };

        hm_right_ring: hm_right_ring {
            compatible = "zmk,behavior-hold-tap";
            label = "HM_RIGHT_RING";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <400>;
            quick-tap-ms = <300>;
            require-prior-idle-ms = <150>;
            flavor = "tap-preferred";
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 15 22 23 24 25 26 27 34 35 36 37 38 39 46 47 48 49 50 51 52 53 54 64 65 66 67 68 69 70 71 55 56 57 72 73 74>;
            hold-trigger-on-release;
        };

        hm_left_ring: hm_left_ring {
            compatible = "zmk,behavior-hold-tap";
            label = "HM_LEFT_RING";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <400>;
            quick-tap-ms = <300>;
            require-prior-idle-ms = <150>;
            flavor = "tap-preferred";
            hold-trigger-key-positions = <5 6 7 8 9 16 17 18 19 20 21 28 29 30 31 32 33 40 41 42 43 44 45 55 56 57 58 59 60 61 62 63 72 73 74 75 76 77 78 79 52 53 54 69 70 71>;
            hold-trigger-on-release;
        };

        hm_right_pinky: hm_right_pinky {
            compatible = "zmk,behavior-hold-tap";
            label = "HM_RIGHT_PINKY";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <260>;
            quick-tap-ms = <300>;
            require-prior-idle-ms = <150>;
            flavor = "tap-preferred";
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 15 22 23 24 25 26 27 34 35 36 37 38 39 46 47 48 49 50 51 52 53 54 64 65 66 67 68 69 70 71 55 56 57 72 73 74>;
            hold-trigger-on-release;
        };

        hm_left_pinky: hm_left_pinky {
            compatible = "zmk,behavior-hold-tap";
            label = "HM_LEFT_PINKY";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <260>;
            quick-tap-ms = <300>;
            require-prior-idle-ms = <150>;
            flavor = "tap-preferred";
            hold-trigger-key-positions = <5 6 7 8 9 16 17 18 19 20 21 28 29 30 31 32 33 40 41 42 43 44 45 55 56 57 58 59 60 61 62 63 72 73 74 75 76 77 78 79 52 53 54 69 70 71>;
            hold-trigger-on-release;
        };

        hyper_right: hyper_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HYPER_RIGHT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <300>;
            require-prior-idle-ms = <100>;
            flavor = "tap-preferred";
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 15 22 23 24 25 26 27 34 35 36 37 38 39 46 47 48 49 50 51 52 53 54 55 56 64 65 66 67 68 69 70 71 72 55 56 57 72 73 74>;
            hold-trigger-on-release;
        };

        hyper_left: hyper_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HYPER_LEFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <300>;
            require-prior-idle-ms = <100>;
            flavor = "tap-preferred";
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 15 22 23 24 25 26 27 34 35 36 37 38 39 46 47 48 49 50 51 52 53 54 55 56 64 65 66 67 68 69 70 71 72 55 56 57 72 73 74>;
        };

        layer_on_hold: layer_on_hold {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_ON_HOLD";
            bindings = <&sl>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <300>;
            require-prior-idle-ms = <150>;
            flavor = "tap-preferred";
            hold-trigger-on-release;
            hold-trigger-key-positions = <5 6 7 8 9 16 17 18 19 20 21 28 29 30 31 32 33 40 41 42 43 44 45 55 56 57 58 59 60 61 62 63 72 73 74 75 76 77 78 79 52 53 54 69 70 71>;
        };

        enter_or_capsword: enter_or_capsword {
            compatible = "zmk,behavior-mod-morph";
            label = "ENTER_OR_CAPSWORD";
            bindings = <&kp ENTER>, <&caps_word>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        backspace_or_delete: backspace_or_delete {
            compatible = "zmk,behavior-mod-morph";
            label = "BACKSPACE_OR_DELETE";
            bindings = <&kp BACKSPACE>, <&kp DELETE>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT)>;
        };

        sticky_key_quick_release: sticky_key_quick_release {
            compatible = "zmk,behavior-sticky-key";
            label = "STICKY_KEY_QUICK_RELEASE";
            bindings = <&sk>;
            #binding-cells = <1>;
            quick-release;
            release-after-ms = <1000>;
        };
    };

    macros {
        rgb_ug_status_macro: rgb_ug_status_macro_0 {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&rgb_ug RGB_STATUS>;
        };

        bt_0: bt_profile_macro_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 0>;
        };

        bt_1: bt_profile_macro_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 1>;
        };

        bt_2: bt_profile_macro_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 2>;
        };

        bt_3: bt_profile_macro_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 3>;
        };
    };

    combos {
        compatible = "zmk,combos";

        combo_copy {
            bindings = <&kp LG(C)>;
            key-positions = <49 50>;
            layers = <0>;
        };

        combo_paste {
            bindings = <&kp LG(V)>;
            key-positions = <51 50>;
            layers = <0>;
        };

        combo_equal {
            bindings = <&kp EQUAL>;
            key-positions = <30 31>;
            layers = <0>;
        };

        combo_backtick {
            bindings = <&kp NON_US_BACKSLASH>;
            key-positions = <25 24>;
            layers = <0>;
        };

        combo_undo {
            bindings = <&kp LG(Z)>;
            key-positions = <47 48>;
            layers = <0>;
        };

        combo_cut {
            bindings = <&kp LG(X)>;
            key-positions = <48 49>;
            layers = <0>;
        };

        combo_left_curly {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <37 38>;
            layers = <0>;
        };

        combo_right_curly {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <41 42>;
            layers = <0>;
        };

        combo_left_shift {
            bindings = <&sticky_key_quick_release LEFT_SHIFT>;
            key-positions = <36 37>;
            layers = <0 2 1 3>;
        };

        combo_right_shift {
            bindings = <&sticky_key_quick_release RIGHT_SHIFT>;
            key-positions = <42 43>;
            layers = <0 2 1 3>;
        };

        combo_hyphen {
            bindings = <&kp MINUS>;
            key-positions = <60 61>;
            layers = <0>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |  F1   |  F2 |  F3 |  F4  |  F5  |                                                               |  F6   |  F7   |  F8  |   F9  |  F10 |
            // |  =    |  1  |  2  |  3   |  4   |  5   |                                                 |  6   |   7   |   8   |  9   |   0   |   -  |
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                                                 |  Y   |   U   |   I   |  O   |   P   |   \  |
            // |  ESC  |  A  |  S  |  D   |  F   |  G   |                                                 |  H   |   J   |   K   |  L   |   ;   |   '  |
            // |   `   |  Z  |  X  |  C   |  V   |  B   | LSHFT | LCTRL | LOWER | | LGUI  | RCTRL | RSHFT |  N   |   M   |   ,   |  .   |   /   | PGUP |
            // | MAGIC | HOME| END | LEFT | RIGHT|      | BSPC  | DEL   | LALT  | | RALT  | RET   | SPACE |      |  UP   | DOWN  |  [   |   ]   | PGDN |

            bindings = <
&none          &none                          &none                     &none  &none                                                                                                                                                                                                                       &none                        &none      &none                       &none                               &none
&none          &none                          &none                     &none  &none                  &none                                                                                                                                                          &none                                 &none                        &none      &none                       &none                               &none
&kp ESC        &kp Q                          &kp W                     &kp E  &kp R                  &kp T                                                                                                                                                          &kp Y                                 &kp U                        &kp I      &kp O                       &kp P                               &kp BACKSLASH
&kp BACKSPACE  &layer_on_hold 2 A             &hm_left_ring LEFT_ALT S  &kp D  &hm_left_index LGUI F  &hyper_left LC(LA(LS(LEFT_GUI))) G                                                                                                                             &hyper_right RC(RA(RS(RIGHT_GUI))) H  &hm_right_index RIGHT_GUI J  &kp K      &hm_right_ring RIGHT_ALT L  &layer_on_hold 3 SEMI               &kp APOSTROPHE
&none          &hm_left_pinky LEFT_CONTROL Z  &kp X                     &kp C  &kp V                  &kp B                               &none                   &none                       &none  &none  &none                            &none                   &kp N                                 &kp M                        &kp COMMA  &kp DOT                     &hm_right_pinky RIGHT_CONTROL FSLH  &kp F13
&magic 5 0     &none                          &none                     &to 3  &kp LEFT_SHIFT                                             &layer_on_hold 2 ENTER  &layer_on_hold 1 LA(SPACE)  &none  &none  &mt RCTRL RS(RC(RA(RG(SPACE))))  &layer_on_hold 3 SPACE                                        &sl 1                        &to 2      &none                       &none                               &none
            >;
        };

        one_shot {
            bindings = <
&trans  &trans           &trans    &trans     &trans                                                                                                                                                                  &trans                &trans                 &trans     &trans     &trans
&trans  &trans           &trans    &trans     &trans     &trans                                                                                                                                        &trans         &trans                &trans                 &trans     &trans     &trans
&trans  &none            &kp AMPS  &kp ASTRK  &kp TILDE  &none                                                                                                                                         &kp CARET      &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp EQUAL  &kp MINUS  &trans
&trans  &kp NON_US_BSLH  &kp DLLR  &kp PRCNT  &kp CARET  &kp ESC                                                                                                                                       &kp BACKSLASH  &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp PLUS   &kp UNDER  &trans
&trans  &none            &kp EXCL  &kp AT     &kp HASH   &kp TAB  &trans                  &trans                      &trans  &trans  &trans                                   &trans                  &none          &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp LT     &kp GT     &kp F13
&trans  &trans           &trans    &to 3      &to 0               &layer_on_hold 2 ENTER  &layer_on_hold 1 LA(SPACE)  &trans  &trans  &mt RA(RS(RCTRL)) RS(RA(RC(RG(SPACE))))  &layer_on_hold 3 SPACE                 &kp RIGHT_ALT         &to 2                  &trans     &trans     &trans
            >;
        };

        numbers {
            bindings = <
&trans  &trans         &trans      &trans             &trans                                                                                                                                                                                                &trans  &trans  &trans  &trans  &trans
&trans  &trans         &trans      &trans             &trans           &trans                                                                                                                                                                    &trans     &trans  &trans  &trans  &trans  &trans
&trans  &kp ESC        &kp C_RW    &kp C_PLAY_PAUSE   &kp C_FF         &trans                                                                                                                                                                    &kp MINUS  &kp N7  &kp N8  &kp N9  &trans  &trans
&trans  &kp BACKSPACE  &kp K_MUTE  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &hyper_left LS(LC(LG(LEFT_ALT))) N5                                                                                                                                       &kp EQUAL  &kp N4  &kp N5  &kp N6  &trans  &trans
&trans  &none          &trans      &kp C_BRI_DEC      &kp C_BRI_INC    &trans                               &trans                  &trans                      &trans  &trans  &trans                                   &trans                  &kp N0     &kp N1  &kp N2  &kp N3  &trans  &kp F13
&trans  &trans         &trans      &to 3              &to 0                                                 &layer_on_hold 2 ENTER  &layer_on_hold 1 LA(SPACE)  &trans  &trans  &mt RA(RS(RCTRL)) RS(RA(RC(RG(SPACE))))  &layer_on_hold 3 SPACE             &to 1   &to 2   &trans  &trans  &trans
            >;
        };

        navigate {
            bindings = <
&trans  &trans         &trans             &trans            &trans                                                                                                                                                        &trans                &trans           &trans       &trans                 &trans
&trans  &trans         &trans             &trans            &trans         &trans                                                                                                                               &trans    &trans                &trans           &trans       &trans                 &trans
&trans  &kp ESC        &trans             &kp LC(UP_ARROW)  &trans         &kp Q                                                                                                                                &trans    &kp RG(LEFT_BRACKET)  &kp RG(RS(TAB))  &kp RG(TAB)  &kp RG(RIGHT_BRACKET)  &trans
&trans  &kp BACKSPACE  &kp LC(LEFT)       &kp LC(DOWN)      &kp LC(RIGHT)  &kp RG(TAB)                                                                                                                          &kp LEFT  &kp DOWN              &kp UP_ARROW     &kp RIGHT    &trans                 &trans
&trans  &none          &kp LA(BACKSPACE)  &kp TAB           &kp DEL        &none        &trans                  &trans                      &trans  &trans  &trans                                   &trans     &trans    &trans                &trans           &trans       &trans                 &kp F13
&trans  &trans         &trans             &kp LCTRL         &to 0                       &layer_on_hold 2 ENTER  &layer_on_hold 1 LA(SPACE)  &trans  &trans  &mt RA(RS(RCTRL)) RS(RA(RC(RG(SPACE))))  &kp SPACE            &to 1                 &to 2            &trans       &trans                 &trans
            >;
        };

        magic_layer {
            bindings = <
&bt BT_CLR   &none            &none            &none            &none                                                                                     &none  &none  &none  &none  &bt BT_CLR_ALL
&none        &none            &none            &none            &none            &none                                                             &none  &none  &none  &none  &none  &none
&none        &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                   &none  &none  &none  &none  &none  &none
&bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                   &none  &none  &none  &none  &none  &bootloader
&sys_reset   &none            &none            &none            &none            &none            &bt_2  &bt_3  &none         &none  &none  &none  &none  &none  &none  &none  &none  &sys_reset
&none        &none            &none            &none            &none                             &bt_0  &bt_1  &out OUT_USB  &none  &none  &none         &none  &none  &none  &none  &to 0
            >;
        };

        factory_test_layer {
            bindings = <
&kp N0  &kp N6  &kp N2  &kp N8  &kp N4                                                                  &kp N4  &kp N8  &kp N2  &kp N6  &kp N0
&kp N1  &kp N7  &kp N3  &kp N9  &kp N5  &kp N0                                                  &kp N0  &kp N5  &kp N9  &kp N3  &kp N7  &kp N1
&kp N2  &kp N8  &kp N4  &kp N0  &kp N6  &kp N1                                                  &kp N1  &kp N6  &kp N0  &kp N4  &kp N8  &kp N2
&kp N3  &kp N9  &kp N5  &kp N1  &kp N7  &kp N2                                                  &kp N2  &kp N7  &kp N1  &kp N5  &kp N9  &kp N3
&kp N4  &kp N0  &kp N6  &kp N2  &kp N8  &kp N3  &kp N4  &kp N5  &kp N6  &kp N6  &kp N5  &kp N4  &kp N3  &kp N8  &kp N2  &kp N6  &kp N0  &kp N4
&kp N5  &kp N1  &kp N7  &kp N3  &kp N9          &kp N7  &kp N8  &kp N9  &kp N9  &kp N8  &kp N7          &kp N9  &kp N3  &kp N7  &kp N1  &kp N5
            >;
        };
    };
};
